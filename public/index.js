let arrayData = [
    {
        question: "Понятие ОС. Главные цели разработчиков. Главные функции ОС. 1",
        answer: "Операцио́нная систе́ма, сокр. ОС  — комплекс взаимосвязанных программ, предназначенных для управления ресурсами компьютера и организации взаимодействия с пользователем.<br><br>Главные цели разработчиков операционной системы<br>\t• Эффективное использование всех компьютерных ресурсов <br>\t• Повышение производительности труда программистов<br>\t• Простота, гибкость, эффективность и надежность организации вычислительного процесса  <br>\t• Обеспечение независимости прикладных программ от аппаратного обеспечения (АО) <br><br>Основные функции:<br>\t• Исполнение запросов программ (ввод и вывод данных, запуск и остановка других программ, выделение и освобождение дополнительной памяти и др.).<br>\t• Загрузка программ в оперативную память и их выполнение.<br>\t• Стандартизированный доступ к периферийным устройствам (устройства ввода-вывода).<br>\t• Управление оперативной памятью.<br>\t• Обеспечение пользовательского интерфейса."
    },
    {
        question: "Понятие ОС. Главные цели разработчиков. Дополнительные функции ОС. 1",
        answer: "Главные цели разработчиков операционной системы<br>\t• Эффективное использование всех компьютерных ресурсов <br>\t• Повышение производительности труда программистов<br>\t• Простота, гибкость, эффективность и надежность организации вычислительного процесса  <br>\t• Обеспечение независимости прикладных программ от аппаратного обеспечения (АО) <br><br><br>Дополнительные функции:<br>\t• Параллельное или псевдопараллельное выполнение задач (многозадачность).<br>\t• Эффективное распределение ресурсов вычислительной системы между процессами.<br>\t• Разграничение доступа различных процессов к ресурсам.<br>\t• Защита самой системы, а также пользовательских данных и программ от действий пользователей <br>\t• Многопользовательский режим работы и разграничение прав доступа ( аутентификация, авторизация)."
    },
    {
        question: "История возникновения ОС с 1940-х до 1980-х. Классификация ПО. 1",
        answer: "Не добавлено"
    },
    {
        question: "История возникновения ОС с 1980-х до 1987 ого года. Классификация ПО. 1",
        answer: "Классификация программного обеспечения<br><br>Программное обеспечение (англ. software) – это совокупность программ, обеспечивающих функционирование компьютеров и решение с их помощью задач предметных областей. Программное обеспечение (ПО) представляет собой неотъемлемую часть компьютерной системы, является логическим продолжением технических средств и определяет сферу применения компьютера.  <br>Три группы :<br><br>1.     Системное программное обеспечение (системные программы);  <br><br>2.     Прикладное программное обеспечение (прикладные программы);<br><br>3.    <br><question>Инструментальное программное обеспечение (инструментальные системы).<br><br><br>1987 год – появление OS/2<br><br>В 1987 году в результате совместных усилий Microsoft и IBM появилась первая многозадачная система для персональных компьютеров с процессором Intel 80286, в полной мере использующая возможности защищённого режима - OS/2. <br>  Эта система была хорошо продуманна. Она поддерживала вытесняющую многозадачность, виртуальную память, графический пользовательский интерфейс (не с первой версии) и виртуальную машину для выполнения DOS- приложений. Фактически она выходила за пределы простой многозадачности с её концепцией распараллеливания отдельных процессов, получившей название много поточности. OS/2 с её развитыми функциями многозадачности и файловой системой HPFS со встроенными средствами многопользовательской защиты оказалась хорошей платформой для построения локальных сетей персональных компьютеров."
    },
    {
        question: "Понятие ОС. Классификация ОС. 2",
        answer: "Операцио́нная систе́ма, сокр. ОС  — комплекс взаимосвязанных программ, предназначенных для управления ресурсами компьютера и организации взаимодействия с пользователем.<br><br>В настоящее время в мире используется большое количество операционных систем, которые можно классифицировать на группы по следующим признакам:<br><br>1. Количеству одновременно работающих пользователей: однопользовательские, многопользовательские.<br><br>2. Числу процессов, одновременно выполняемых под управлением системы: однозадачные, многозадачные.<br><br>3. Количеству поддерживаемых процессоров: однопроцессорные, многопроцессорные.<br><br>4. Разрядности кода: 8-разрядные, 16-разрядные, 32-разрядные, 64-разрядные.<br><br>5. Типу интерфейса: командные (текстовые) и объектно-ориентированные (графические).<br><br>6. Типу доступа пользователя к ЭВМ: с пакетной обработкой, с разделением времени, реального времени.<br><br>7. Типу использования ресурсов: сетевые, локальные."
    },
    {
        question: "Рассказать про ОС семейства DOS. 2",
        answer: "• Первый представитель этого семейства – система MS-DOS (Microsoft Disk Operating System – дисковая операционная система фирмы Microsoft) была выпущена  в 1981 году в связи с появлением компьютеров IBM PC.<br><br>\t• ОС семейства DOS обладают следующими характерными особенностями:<br><br>\t• Однопользовательская.<br><br>\t• Однозадачная.<br><br>\t• Имеет командный интерфейс.<br><br>\t• 16-разрядная.<br><br>\t• По типу управления ресурсами – несетевая.<br><br>\t• Имеет модульную структуру, упрощающую перенос системы на другие типы ЭВМ.<br><br>\t• Небольшой объем доступной оперативной памяти (640 Кбайт, до 1 Мбайт).<br><br>\t• Существенный недостаток ОС семейства DOS – отсутствие средств защиты от несанкционированного доступа к ресурсам ПК и ОС."
    },
    {
        question: "Рассказать про ОС семейства OS/2. 2",
        answer: "ОС OS/2 (Operating System / 2) была разработана фирмой IBM в 1987 году в связи с созданием нового семейства ПК PS/2.<br><br>ОС семейства OS/2 обладают следующими характерными особенностями:<br><br>Однопользовательская ОС.<br><br>Многозадачная ОС второго поколения: позволяет организовать параллельную работу нескольких прикладных программ, обеспечивая при этом защиту одной программы от другой и ОС от работающих под ее управлением программ.<br><br>Имеет графический интерфейс.<br><br>32-разрядная.<br><br>Родная файловая система – HPFS.<br><br>Недостаток OS/2 – малое число приложений для нее, что делает эту систему менее популярной, чем, например, Windows."
    },
    { //
        question: "Рассказать про ОС семейства UNIX. 2",
        answer: "• ОС UNIX была разработана Кеном Томпсоном – сотрудником фирмы Bell Laboratories концерна AT&T в 1969 году для различных компьютеров: от суперкомпьютера до миникомпьютеров. С тех пор было создано большое количество различных UNIX-систем. Юридически лишь некоторые из них имеют полное право называться «UNIX»; остальные же, хотя и используют сходные концепции и технологии, объединяются термином «UNIX-подобные». В ходе разработки Unix-систем был создан язык СИ.<br>• ОС семейства UNIX обладает следующими характерными особенностями:<br>• Многопользовательская ОС.<br>• Многозадачная ОС.<br>• Сетевая ОС.<br>• Командная ОС, графическая оболочка: X Window.<br>• 32-разрядная, 64-разрядная.<br>• мобильная: существует возможность перенести систему с одной машинной архитектуры на другую с минимальными затратами.<br>• имеет несколько видов оболочек (Shell), т.е. интерфейсов взаимодействия между ядром и пользователем.<br>• файловая система: NFS (сетевая файловая система).<br>• использование простых текстовых файлов для настройки и управления системой.<br>• широкое применение утилит, запускаемых в командной строке.<br>• взаимодействие с пользователем посредством виртуального устройства – терминала.<br>• представление физических и виртуальных устройств и некоторых средств межпроцессового взаимодействия как файлов.<br>• использование конвейеров из нескольких программ, каждая из которых выполняет одну задачу.<br>• имеет несколько видов оболочек (Shell), т.е. интерфейсов взаимодействия между ядром и пользователем.<br>• файловая система: NFS (сетевая файловая система).<br>• использование простых текстовых файлов для настройки и управления системой.<br>• широкое применение утилит, запускаемых в командной строке.<br>• взаимодействие с пользователем посредством виртуального устройства – терминала.<br>• представление физических и виртуальных устройств и некоторых средств межпроцессового взаимодействия как файлов.<br>• использование конвейеров из нескольких программ, каждая из которых выполняет одну задачу.<br>• Linux  (полное название GNU/Linux) – это UNIX-подобная ОС. Linux  свободно распространяемая ОС, первоначально разработанная Линусом Торвальдсом. Первая официальная версия объявлена 5 октября 1991 года.<br>• Версии: Debian GNU/Linux – не имеющий национальной принадлежности международный дистрибутив (а также его ответвления, включая сверх-популярные Ubuntu, Kubuntu, Xubuntu), американский Red Hat и его наследник Fedora, французско-бразильский Mandriva, бывшие Mandrake и Conectiva."
    },
    {
        question: "Понятие интерфейс. Главная цель приложений. 3",
        answer: "• Интерфейс – это внешняя оболочка приложения вместе с программами управления доступом и другими скрытыми от пользователя механизмами управления, дающая возможность работать с документами, данными и другой информацией, хранящейся в компьютере или за его пределами.<br><br>• Главная цель любого приложения – обеспечить максимальное удобство и эффективность работы с информацией."
    },
    {
        question: "Понятие программного интерфейса. Виды функциональности интерфейса. 3",
        answer: "• Программный интерфейс — функциональность, которую некоторый программный компонент предоставляет другим программным компонентам.<br>• <br>интерфейсом программирования приложений<br> интерфейсом программирования компонентов операционной системы<br><br>• та, что используется при создании прикладных программ — интерфейсом программирования приложени<br>• та, что используется при создании системных компонентов и может называться интерфейсом программирования компонентов операционной системы или интерфейсом системного программирования (SPI, англ. system programming interface)."
    },
    {
        question: "Понятие интерфейса. Перечислите средства интерфейса 3",
        answer: "• ввод информации/команд  пользователем в устройство <br>• вывод информации из устройства к пользователю"
    },
    {
        question: "Понятие программного интерфейса. Ориентированность интерфейса на человека. 3",
        answer: "набор способов и правил, по которым различные программы общаются между собой и обмениваются данными. <br><br>○ Интерфейс является ориентированным на человека, если он отвечает нуждам человека и учитывает его слабости."
    },
    {
        question: "Рассказать про OOMY-интерфейс. 3",
        answer: "ООМУ (окно, образ, меню, указатель) <br>WIMP (window, image, menu, pointer) <br><br>Характерная черта этого интерфейса –  диалог пользователя с компьютером ведется с помощью окон, графических образов меню, курсора и других элементов."
    },
    {
        question: "Рассказать про простой графический редактор. (мб отпечатка  не редактор, а \"интерфейс\", ибо в лекции нет слова редактор) 3",
        answer: "На первом этапе очень походил на технологию командной строки со следующими отличиями:<br>\t○ при отображении символов с целью повышения выразительности изображения допускалось выделение части символов цветом, инверсным изображением, подчеркиванием и мерцанием;<br>\t○ курсор мог быть представлен некоторой областью, выделенной цветом и охватывающей несколько символов и даже часть экрана;<br>\t○ реакция на нажатие любой клавиши во многом стало зависеть от того, в какой части находится курсор.<br>\t○ кроме часто используемых клавиш управлением курсором стали использоваться манипуляторы типа мыши, трекбола и т.п., которые позволяли быстро выделять нужную область экрана и перемещать курсор;<br>\t○ широкое использование цветных мониторов."
    },
    {
        question: "Рассказать про полный WIMP-интерфейс. 3",
        answer: "Второй этап развития графического интерфейса, который характеризуется следующими особенностями:<br>\t○ вся работа с программами, файлами и документами происходит в окнах;<br>\t○ программы, файлы, документы, устройства и другие объекты представляются в виде значков (иконок), которые при открытии превращаются в окна;<br>\t○ все действия с объектами осуществляются с помощью меню, которое становится основным элементом управления;<br>\t○ манипулятор выступает в качестве главного средства управления."
    },
    {
        question: "Понятие интерфейса. Перечислить предпосылки создания графического интерфейса 3, т.е почему?",
        answer: "• Предпосылкой графического интерфейса явилось:<br>\t• уменьшение времени реакции компьютера на команду, <br>\t• увеличение объема оперативной памяти, <br>\t• развитие элементной базы, технических характеристик ЭВМ и в частности мониторов."
    },
    {
        question: "Понятие диалогового окна. Как открыть диалоговое окно? 4",
        answer: "Диалоговое окно - это небольшое, обычно модальное, окно, которое появляется поверх основного окна приложения и требует от пользователя взаимодействия прежде, чем основное приложение сможет продолжить работу. - взято из чат гпт<br><br>Нажмите одновременно на клавиши клавиатуры «Win» + «R»."
    },
    {
        question: "Понятие диалогового окна. Какие команды можно делать в диалоговом окне? 4",
        answer: "Диалоговое окно - это небольшое, обычно модальное, окно, которое появляется поверх основного окна приложения и требует от пользователя взаимодействия прежде, чем основное приложение сможет продолжить работу."
    },
    {
        question: "Понятие жесткий диск. Перечислите методы записи на жёсткий диск. 5",
        answer: "Жесткий диск, он же Hard Disk Drive, HDD - — запоминающее устройство (устройство хранения информации) произвольного доступа, основанное на принципе магнитной записи.<br><br>В методе параллельной записи биты записываются в горизонтальные магнитные домены. <br><br>В перпендикулярной записи биты записываются в вертикальные домены, что позволяет увеличить плотность записи."
    },
    {
        question: "Рассказать про хранение информации на HDD. 5",
        answer: "Принципы хранения информации на HDD<br> Информация записывается на жёсткие пластины, покрытые слоем ферромагнитика.<br><br>Используется от одной до нескольких пластин на одной оси.<br>Данные хранятся в виде концентрических дорожек, каждая из которых разделена на секторы по 512 байт."
    },
    {
        question: "Понятия дорожка, сектор, цилиндр в HDD.",
        answer: "Дорожки – концентрические  кольцевые области. Каждая дорожка делится на равные отрезки – секторы.<br>Сектор – часть магнитной дорожки, входящей в геометрический сектор.<br>Цилиндр – совокупность дорожек, равноотстоящих от центра, на всех пластинах жёсткого диска.<br>Кластер – набор нескольких секторов"
    },
    {
        question: "Понятие винчестер. Перечислить режимы адресации. 5",
        answer: "Винчестер содержит один или несколько дисков (platters), то есть это носитель, который смонтирован на оси-шпинделе, приводимом в движение специальным двигателем (часть привода). <br>Существует 2 основных способа адресации секторов на диске:<br>CHS - сектор адресуется 3 координатами  номером цилиндра, номером головки и номером сектора<br>LBA - адрес блоков данных на носителе задаётся с помощью логического линейного адреса."
    },
    {
        question: "Понятие «Парковка» в жестких дисках. Перечислите виды записи на жёсткий диск. 5",
        answer: "Магнитные головки<br>Головки представляют собой магнитные управляемые контуры с сердечниками, на обмотки которых подается переменное напряжение.<br><br><br>Парковкой называется процесс перемещения магнитных головок в специальную зону диска, которая называется парковочной зоной\".<br>Эта зона не содержит абсолютно никакой полезной информации, кроме специальной сервисной метки, указывающей на местоположение места \"парковки\".  <br><br>В методе параллельной записи биты записываются в горизонтальные магнитные домены. <br><br>В перпендикулярной записи биты записываются в вертикальные домены, что позволяет увеличить плотность записи."
    },
    {
        question: "Понятие микропроцессор. Что является важным компонентом электронной платы? 5",
        answer: "Микропроцессор - микросхема, внутренняя структура обработатывает массивы данных, поступающих в схему со стороны магнитных головок и компьютера. <br><br>Важным компонентом электронной платы являются разъемы для подключения соединительного кабеля и напряжения питания."
    },
    {
        question: "Понятие SSD диски. Перечислите контроллеры SSD накопителей. 5",
        answer: "Твердотельный накопитель (SSD, solid-state drive)— компьютерное немеханическое запоминающее устройство на основе микросхем памяти. <br><br>Контроллеры SandForce- интерфейс SATA-<br>Контроллеры Marvell - используется в SSD-дисках марки Crucial C300, M4/C400, а один из самых недорогих, надёжных и быстрых.<br>Marvell 88SS9187 используется  накопителях Plextor серии M5 Pro, M5M.<br>Контроллеры LAMD (Hynix).<br>Контроллеры LM87800 от LAMD используются в накопителях Corcair серии Neutron и Neutron GTX."
    },
    {
        question: "Понятие SSD диски. Какие 2 типа NAND-памяти применяется в SSD? 5",
        answer: "В памяти типа SLC используются одноуровневые транзисторы (их ещё называют ячейками). Это значит, что один транзистор может хранить 0 или 1. Одним словам такой транзистор может запомнить только 1 бит информации.<br>MLC — одна ячейка памяти может хранить более одного бита информации. В 4-уровневой MLC-ячейке один транзистор хранит 2 бита информации (4 уровня: 00, 01, 10, 11)"
    },
    {
        question: "Понятие прерывания. Перечислить классы прерываний. 6",
        answer: "Прерывания – преднамеренное завершение текущей задачи и переход к следующей. Выполнение текущей программы прерывается и управление передаётся обработчику прерываний<br><br>В зависимости от источника, прерывания делятся на три больших класса:<br>• внешние;<br>• внутренние;<br>• Программные;<br>• Вложенные;"
    },
    {
        question: "Рассказать про последовательность действий при обработке прерываний. 6",
        answer: "1. Распознавание: Процессор определяет тип прерывания. Если оно разрешено, вызывается обработчик (его адрес в таблице ОС).<br><br>2. Сохранение контекста: Часть состояния прерванного процесса (счётчик команд, регистры и др.) сохраняется.<br><br>3. Переход к обработчику: Загружается адрес обработчика прерывания и, возможно, меняются режимы работы процессора.<br><br>4. Блокировка прерываний: Прерывания данного типа временно запрещаются, чтобы избежать рекурсии.<br><br>5. Восстановление: После обработки обработчик возвращает управление. Контекст восстанавливается (частично аппаратно, частично программно), и процесс продолжает работу."
    },
    {
        question: "Рассказать про внешние прерывания. 6",
        answer: "Внешние (аппаратные) прерывания вызываются действиями пользователя, внешними устройствами или датчиками. Это асинхронные события, прерывающее выполнение программы. После обработки прерывания программа возобновляется."
    },
    {
        question: "Рассказать про внутренние прерывания. 6",
        answer: "Внутренние прерывания (исключения) возникают синхронно с выполнением программы из-за ошибок (деление на ноль, ошибки памяти и т.п.)."
    },
    {
        question: "Рассказать про вложенные прерывания. 6",
        answer: "Прерывания, обслуживаемые до завершения обработки предыдущего, называются вложенными. Вложенные прерывания могут создавать опасность переполнения стека, поскольку каждое «вложение» будет использовать его для своих целей"
    },
    {
        question: "Рассказать про программные прерывания. 6",
        answer: "Программные прерывания — это имитация прерываний с помощью специальных команд процессора."
    },
    {
        question: "Рассказать про вектор прерываний. 6",
        answer: "Векторный способ прерываний использует уникальный номер (вектор) для каждого устройства. Этот номер указывает процессору, какой обработчик прерывания нужно запустить. Если к одному прерыванию подключено несколько устройств, то обработчик должен сам определить, какое устройство вызвало прерывание (опрос). Вектор — число (например, 0-255), индекс в таблице обработчиков прерываний."
    },
    {
        question: "Понятие процесса. Перечислить состояния процессов. 7",
        answer: "Процесс – это минимальный программный объект, обладающий собственными системными ресурсами.<br>Процесс ́ — программа, которая выполняется в текущий момент<br><br>Состояния существования процесса Различают следующие состояния процесса: <br>новый (процесс только что создан); <br>• выполняемый (команды программы выполняются в ЦПУ); <br>• ожидающий (процесс ожидает завершения некоторого события, чаше всего операции ввода\u0002вывода); <br>• готовый (процесс ожидает освобождения ЦПУ); <br>• завершенный (процесс завершил свою работу). Переход из одного состояния в другое не может выполняться произвольным образом."
    },
    {
        question: "Понятие диспетчеризации. Назвать алгоритм диспетчеризации. 7",
        answer: "Диспетчеризация процессов (задач) – это определение очередности получения процессора для процессов (задач), находящихся в состоянии готовности, с целью их выполнения. Диспетчеризация процесса связана с его переводом из состояния готовности в состояние выполнения.<br><br>1. Алгоритм разделения времени Round Robin: Поочередное выполнение процессов с квантом времени для каждого. Просто, но может быть неэффективным.<br>2. Алгоритм родственного планирования Affinity Scheduling: Запуск процесса на том же процессоре, что и ранее, для лучшего использования кэша.<br>3. Совместное использование пространства Space Sharing: Группа процессов запускается на отдельных процессорах, если достаточно ресурсов; иначе — ни один не запускается. Оптимален для сильно взаимодействующих параллельных задач."
    },
    {
        question: "Понятие процесс. Перечислите способы выбора процесса для диспетчеризации. 7",
        answer: "Процесс – это минимальный программный объект, обладающий собственными системными ресурсами.<br>Процесс ́ — программа, которая выполняется в текущий момент<br><br> (статический подход) или (динамический подход)."
    },
    {
        question: "Понятие процесс. Перечислите состояния процессов. 7",
        answer: "Процесс – это минимальный программный объект, обладающий собственными системными ресурсами.<br>Процесс ́ — программа, которая выполняется в текущий момент<br><br>Различают следующие состояния процесса: <br>• новый (процесс только что создан);<br>• выполняемый (команды программы выполняются в ЦПУ); <br>• ожидающий (процесс ожидает завершения некоторого события, чаше всего операции ввода, вывода); <br>• готовый (процесс ожидает освобождения ЦПУ); <br>• завершенный (процесс завершил свою работу). Переход из одного состояния в другое не может выполняться произвольным образом."
    },
    {
        question: "Понятия диспетчеризация процессов, дисциплина диспетчеризации, диспетчер. 7",
        answer: "Диспетчеризация процессов (задач) – это определение очередности получения процессора для процессов (задач), находящихся в состоянии готовности, с целью их выполнения. Диспетчеризация процесса связана с его переводом из состояния готовности в состояние выполнения.<br><br>Различают следующие состояния процесса: <br>• новый (процесс только что создан); <br>• выполняемый (команды программы выполняются в ЦПУ); <br>• ожидающий (процесс ожидает завершения некоторого события, чаше всего операции ввода\u0002вывода); <br>• готовый (процесс ожидает освобождения ЦПУ); <br>• завершенный (процесс завершил свою работу). Переход из одного состояния в другое не может выполняться произвольным образом."
    },
    {
        question: "Понятие каналы ввода-вывода. Перечислите функции канала ввода-вывода. 8",
        answer: "Каналы ввода-вывода (англ. IOC - input-output channel), далее КВВ, и интерфейсы обеспечивают взаимодействие центральных устройств машины и периферийных устройств.<br><br>Каналы ввода-вывода (КВВ)<br><br>КВВ и интерфейсы выполняют следующие функции: <br>\t1. Компьютер умеет работать с разными устройствами, которые можно подключать и отключать в любое время.<br>\t2. Разные устройства могут работать вместе в одно и то же время. Например, принтер может печатать, пока вы работаете с мышкой.<br>\t3. Компьютер автоматически замечает, когда с подключенным устройством что-то не так."
    },
    {
        question: "Понятия ввода и вывода. Перечислите виды каналов ввода-вывода. 8",
        answer: "Каналы ввода-вывода (КВВ) обеспечивают работу с переменным составом периферии, параллельную работу устройств и автоматическую реакцию на события.<br><br> Существуют три типа КВВ: <br>мультиплексный (передает по одному слову, переключаясь между устройствами), <br>селекторный (передает всю информацию одному устройству, затем другому) и <br>блок-мультиплексный (передает часть информации, затем переключается)"
    },
    {
        question: "Рассказать про очередь запросов на ввод-вывод. 8",
        answer: "1. Запрос: Программа делает запрос на ввод-вывод.<br>2. Очередь: Запрос попадает в очередь управления В/В.<br>3. Супервизор: Супервизор планирует выполнение запросов из очереди.<br>4. Устройство: Супервизор передает запрос на устройство В/В.<br>5. Буфер: Данные временно хранятся в буфере.<br>6. Завершение: Устройство сообщает о завершении, запрос удаляется из очереди.<br><br>Очередь запросов на ввод-вывод — это механизм, используемый операционной системой для управления операциями чтения и записи на устройства, обеспечивая их эффективное и упорядоченное выполнение. Супервизор планирует обработку запросов в этой очереди."
    },
    {
        question: "Рассказать про алгоритм обработки прерываний по вводу-выводу. 8",
        answer: "1. Сигнал прерывания: Устройство В/В завершает работу и отправляет сигнал прерывания процессору.<br>2. Прием сигнала: Процессор завершает текущую команду и принимает сигнал прерывания, давая устройству разрешение снять сигнал.<br>3. Переход к обработчику: Процессор загружает адрес программы обработки прерывания (общей или специфичной) в программный счетчик и переходит к ней.<br>4. Сохранение состояния: Обработчик прерывания сохраняет состояние прерванной программы (регистры) в стеке.<br>5. Обработка прерывания: Обработчик проверяет состояние устройств В/В, отправляет команды и выполняет необходимые действия.<br>6. Восстановление состояния: Обработчик восстанавливает состояние прерванной программы из стека.<br>7. Продолжение работы: Процессор возвращается к прерванной программе."
    },
    {
        question: "Понятие каналы ввода-вывода. Перечислите режимы операции ввода-вывода. 8",
        answer: "Каналы ввода-вывода (англ. IOC - input-output channel), далее КВВ, и интерфейсы обеспечивают взаимодействие центральных устройств машины и периферийных устройств.<br><br>Операции ввода-вывода по отношению к программному приложению выполняются в синхронном или асинхронном режимах. <br>• Синхронный режим – приложение приостанавливает свою работу и ждет отклика от устройства. <br>• Асинхронный режим – приложение продолжает работу, параллельно с ожиданием отклика от устройства. Операционные системы для разных приложений должны обеспечить синхронную и асинхронную работу с устройствами"
    },
    {
        question: "Понятие ядро (11). Как выглядит структура ОС? (10) Виды модули ядра. (12)",
        answer: "Ядро ́ — центральная часть операционной системы (ОС), обеспечивающая приложениям координированный доступ к ресурсам компьютера, таким как процессорное время, память, внешнее аппаратное обеспечение, внешнее устройство ввода и вывода информации (11)"
    },
    {
        question: "Понятие утилиты. Перечислите набор средств аппаратной поддержки ОС. (20)",
        answer: "Утилиты - обслуживающие программы, которые предоставляют пользователю сервисные функции<br>утилиты - программы, решающие отдельные задачи управления и сопровождения компьютерной системы, такие, как программы архивирования данных;<br><br>Типичный набор средств аппаратной поддержки ОС:<br>• средства поддержки привилегированного режима;<br>• средства трансляции адресов;<br>• средства переключения процессов;<br>• система прерываний;<br>• системный таймер;<br>• средства защиты областей памяти."
    },
    {
        question: "Понятие системные обрабатывающие программы. Режимы работы ядра. ()",
        answer: "Системные обрабатывающие программы – текстовые  и графические редакторы, компиляторы, компоновщики и т.п.<br><br>Обеспечивается привилегированный режим специальными средствами аппаратной поддержкой. Процессор компьютера поддерживает как минимум два режима работы – пользовательский (user mode) и привилегированный (kernel mode).<br>Приложения в пользовательском режиме не могут выполнять некоторые критичные команды (переключение процессора с задачи на задачу, доступ к механизму выделения и защиты областей памяти и т.п.)."
    },
    {
        question: "Понятие сервисы ОС. Какие 7 уровней защиты информации есть?",
        answer: "Сервисы ОС — это набор программных компонентов, которые предоставляют основные функциональные возможности, необходимые для работы компьютера и запуска приложений.<br><br>А1 – верифицированная разработка. Этот уровень требует, чтобы защиту секретной и другой критичной информации средствами управления безопасностью гарантировали методы формальной верификации. <br>В3 – домены безопасности. Этот уровень предназначен для защиты систем от опытных программистов. <br>В2 – структурированная защита. В систему с этим уровнем защиты нельзя допустить проникновение хакеров. <br>В1 – мандатный контроль доступа. Защиту этого уровня, возможно, удастся преодолеть опытному хакеру, но никак не рядовым пользователям. <br>С2 – дискреционный контроль доступа. Уровень С2 обеспечивает защиту процедур входа, позволяет производить контроль за событиями, имеющими отношение к безопасности, а также изолировать ресурсы. <br>С1 – избирательная защита. Этот уровень дает пользователям возможность защитить личные данные или информацию о проекте, установив средства управления доступом. <br>D – минимальная защита. Этот нижний уровень защиты оставлен для систем, которые проходили тестирование, но не смогли удовлетворить требованиям более высокого класса."
    },
    {
        question: "Перечислите состав архитектуры ОС. Понятие монолит.",
        answer: "В состав ОС входят исполняемые и объектные модули стандартных для данной ОС форматов, программные модули специального формата (например, загрузчик ОС, драйверы ввода-вывода), конфигурационные файлы, файлы документации, модули справочной системы и т.д.<br><br>Монолитное ядро - это тип ядра, в котором все компоненты встроены в ядро операционной системы. Это означает, что вся логика и драйверы управления аппаратным обеспечением расположены в едином ядре и работают на уровне ядра. Примеры операционных систем с монолитным ядром: Windows, Linux, Unix."
    },
    {
        question: "Понятие микроядро. Его достоинства и недостатки. Перечислите минимальное функционирование микроядра.",
        answer: "В привилегированном режиме остается работать только очень небольшая часть ОС, называемая микроядром.<br>Каждый уровень этой архитектуры выполняет строго ограниченный набор функций (которые не повторяются от слоя к слою) и не знает о том, как устроены остальные уровни. Поэтому «содержимое» уровней можно изменять без риска глобальных конфликтов между слоями.<br>\t<br>В целом многоуровневые приложения настолько распространены, что для их разработки создаются специальные генераторы шаблонов. Например, LASG для Visual Studio предлагает несколько методов генерации кода, которые автоматизируют рутинные задачи и помогают выстраивать уровни приложения.<br> <br>операционная система на основе микроядра при прочих равных условиях всегда будет менее производительной, чем ОС с классическим ядром."
    },
    {
        question: "Рассказать про виртуальную машину.",
        answer: "VirtualBox (Oracle VM VirtualBox) — это программный продукт виртуализации для операционных систем Microsoft Windows, Linux, FreeBSD, Mac OS X, Solaris/OpenSolaris, ReactOS, DOS и других."
    },
    {
        question: "Понятие реестр. Перечислите классы инструментов.",
        answer: "Реестр – это иерархически построенная, централизованная база данных в составе операционных систем Microsoft Windows 9x/NT/2000/XP/2003/Vista, содержащая сведения, которые используются операционной системой для работы с пользователями, программными продуктами и устройствами."
    },
    {
        question: "Рассказать этапы установки ОС Windows.",
        answer: "Вставить флэшку с образом в пк<br>\t<br>1. Выбор языка, валюты и раскладки.<br>2. Нажатие \"Установить\".<br>3. Ввод ключа активации (или его пропуск).<br>4. Выбор версии Windows (например, Pro).<br>5. Принятие лицензионного соглашения.<br>6. Выбор типа установки: обновление (с сохранением данных) или чистая установка (без сохранения данных).<br>7. Выбор раздела диска и его подготовка (создание, удаление, форматирование).<br>8. Установка файлов системы (длительный процесс).<br>9. Автоматическая перезагрузка и настройка системы."
    },
    {
        question: "Рассказать этапы установки ОС Linux.",
        answer: "Скачайте на выбор любой дистрибутив Linux.<br><br>Загрузите с Live CD.<br><br>Протестируйте дистрибутив Linux перед установкой.<br><br>Начните процесс установки.<br>Создайте имя пользователя и пароль.<br>Создайте раздел.<br>Запустите Linux."
    },
    {
        question: "Понятие реестра. Структура реестра.",
        answer: "Реестр – это иерархически построенная, централизованная база данных в составе операционных систем Microsoft Windows 9x/NT/2000/XP/2003/Vista, содержащая сведения, которые используются операционной системой для работы с пользователями, программными продуктами и устройствами.<br><br>Структура: ветви реестра, ключи реестра, подразделы реестра, параметры"
    },
    {
        question: "Понятие физического реестра. Перечислите, что можно сделать с реестром.",
        answer: "Реестр – это система учета. Реестр используется практически во всех компаниях, которые так или иначе ведут какую-то документацию. Благодаря ему удается правильно отсортировать различные бумаги и распределить их по категориям."
    },
    {
        question: "Понятие стандартные прикладные программы. Перечислите несколько встроенных прикладных программ (18)",
        answer: "Прикладная программа (сокращенно приложение или приложение)-это компьютерная программа, предназначенная для выполнения конкретной задачи, отличной от задачи, связанной с работой самого компьютера, обычно используемой конечными пользователями.<br><br>Paint, блокнот, калькулятор, Microsoft edge, Outlook, часы"
    },
    {
        question: "Понятие утилиты. Перечислите виды утилит.",
        answer: "Утилиты - обслуживающие программы, которые предоставляют пользователю сервисные функции. Многие из утилит обладают развитым диалоговым интерфейсом с пользователем и приближаются по уровню общения к оболочкам. Остальные же используются путем их запуска с определенными аргументами. <br><br>Виды утилит по функциям <br>• антивирусные.<br>• деинсталляторы.<br>• системные."
    },
    {
        question: "Понятие программы-утилиты. Перечислите несколько встроенных в Windows утилиты. (20)",
        answer: "Программы–утилиты - это специальные компьютерные программы для выполнения особых функций, предназначенные для расширения возможностей операционных систем. Это могут быть безвозвратное удаление файлов, восстановление данных, оптимизация Windows, очистка реестра и другие важные задачи<br><br>Конфигурация системы, Сведения о системе, устранение неполадок, управление компьютером, планировщик заданий, просмотр событий"
    },
    {
        question: "Какие инструменты применяются для настройки интернета? Как подключить виртуальную машину к Интернету?",
        answer: "Ipconfig, ping, tracert, nslookup, netstat, arp, netsh. <br><br>1. NAT (Network Address Translation):<br>2. Bridged Networking<br>3. Host-Only Networking"
    },
    {
        question: "Как поменять состояние работы адаптера? Как настроить сеть между виртуальными машинами?",
        answer: "Открыть диспетчер устройств, найти группу сетевые адаптеры. Удалить или добавить нужное устройство.<br><br>Чтобы создать сеть из виртуальных машин VirtualBox:<br>1. в настройках виртуал бох<br> <br>2. Перейдите во вкладку Сеть и нажмите на кнопку с зеленым плюсом: <br> <br>3. Нажмите OK:<br> <br>4. Выберите виртуальную машину, которую хотите добавить в сеть, и кликните по ней правой кнопкой мыши. Нажмите Настроить:<br> <br>5. Выберите тип подключения Сеть NAT. В строке «Имя» выберите имя созданной сети. Нажмите OK"
    }
]

const numOfQuestions = document.getElementById("numQuestions");
const randomSort = document.getElementById("randomSort");
const start = document.getElementById("start");

const questionContainer = document.querySelector(".ekz");
questionContainer.innerHTML = "";


function shuffleArrayNew(array) {
    if (!Array.isArray(array)) {
        throw new Error("Входные данные должны быть массивом.");
    }

    let currentIndex = array.length;
    let temporaryValue, randomIndex;

    // Пока есть неперемешанные элементы
    while (0 !== currentIndex) {
        // Выбираем случайный неперемешанный элемент
        randomIndex = Math.floor(Math.random() * currentIndex);
        currentIndex -= 1;

        // Меняем местами текущий элемент и выбранный случайный элемент
        temporaryValue = array[currentIndex];
        array[currentIndex] = array[randomIndex];
        array[randomIndex] = temporaryValue;
    }

    return array;
}

let count = 0;


start.addEventListener('click', (event) => {
    event.preventDefault();

    let questionChildren = `
        <form class="question">
            <span class="numOfQuestion"></span>
            <div class="questionText"></div>
            <button method="POST" class="showAnswer">Показать ответ</button>
            <div class="answer"></div>
        </form>
    
        <button class="next">Перейти к следующему вопросу</button>
    `;


    document.querySelector(".introducing").innerHTML = "";
    questionContainer.innerHTML = questionChildren;

    let questionText = document.querySelector(".questionText");
    let numOfQuestion = document.querySelector(".numOfQuestion");
    let showAnswer = document.querySelector(".showAnswer");
    let answer = document.querySelector(".answer");
    let next = document.querySelector(".next");


    if (count >= 59) {
        alert("Ай, молодца");
        location.reload(true);
    }

    numOfQuestion.innerHTML = `${count + 1}/60`;
    
    
    if (randomSort.checked == true) {
        const _ = shuffleArrayNew(arrayData);
    }
    
    questionText.innerHTML = arrayData[count]["question"];

    showAnswer.addEventListener("click", (e) => {
        e.preventDefault();

        if (answer.innerHTML.length == 0) {
            answer.innerHTML = arrayData[count]["answer"];
        } else {
            answer.innerHTML = "";
        }
    });
    
    next.addEventListener("click", (e) => {
        count++;
        numOfQuestion.innerHTML = `${count + 1}/60`;
        e.preventDefault();
        questionText.innerHTML = arrayData[count]["question"];
        answer.innerHTML = "";
        console.log(count);
    });
});